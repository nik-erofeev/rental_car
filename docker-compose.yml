services:
  postgres:
    container_name: ${DOCKER_NAME}_postgres
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB__USER}
      POSTGRES_PASSWORD: ${DB__PASSWORD}
      POSTGRES_DB: ${DB__NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - custom
    ports:
      - "15432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB__USER} -d ${DB__NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 3

  backend:
    container_name: ${DOCKER_NAME}_api
    build:
      context: .
    restart: unless-stopped
    command: ["/app/docker/app.sh"]   # старт скрипт: миграции + uvicorn
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    env_file:
      - .env
    networks:
      - custom
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/check_database" ]
      interval: 30s
      timeout: 5s
      retries: 3

  elasticsearch:
    # Хранилище логов (single-node, без security для локалки)
    container_name: ${DOCKER_NAME}_elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - custom

  kibana:
    # UI для поиска по логам/создания data views
    container_name: ${DOCKER_NAME}_kibana
    image: docker.elastic.co/kibana/kibana:8.13.4
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - custom

  kibana_setup:
    # Одноразовый init: создаёт Data View в Kibana через API
    container_name: ${DOCKER_NAME}_kibana_setup
    image: curlimages/curl:8.8.0
    depends_on:
      - kibana
    entrypoint: ["/bin/sh", "/app/docker/elastic/kibana_setup.sh"]
    volumes:
      - ./docker/elastic/kibana_setup.sh:/app/docker/elastic/kibana_setup.sh:ro
    environment:
      - KIBANA_URL=http://kibana:5601
      - DATA_VIEW_NAME=rental_car_api_beckend
      - DATA_VIEW_TITLE=filebeat-*
      - TIME_FIELD=@timestamp
    networks:
      - custom

  filebeat:
    # Агенt доставки логов контейнеров в Elasticsearch
    container_name: ${DOCKER_NAME}_filebeat
    image: docker.elastic.co/beats/filebeat:8.13.4
    restart: unless-stopped
    user: root
    depends_on:
      - backend
      - elasticsearch
    volumes:
      - ./docker/elastic/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro  # конфиг Filebeat
      - /var/lib/docker/containers:/var/lib/docker/containers:ro   # доступ к JSON-логам Docker
      - /var/run/docker.sock:/var/run/docker.sock:ro               # метаданные контейнеров
      - filebeat_data:/usr/share/filebeat/data                     # реестр файлов/смещения
    networks:
      - custom

#  # todo: для мониторинга PostgreSQL через Prometheus.
#  postgres_exporter:
#    container_name: postgres_exporter-smit
#    image: wrouesnel/postgres_exporter:latest
#    restart: unless-stopped
#    env_file:
#      - .env
#    environment:
#      # проверить почему не подтягиваются env
#      #      DATA_SOURCE_URI: "postgres://${DB__USER}:${DB__PASSWORD}@${DB__HOST}:${DB__PORT}/${DB__NAME}?sslmode=disable"
#      DATA_SOURCE_NAME: "postgres://user:pass@postgres:5432/rental_car?sslmode=disable"
#    ports:
#      - "9187:9187"
#    depends_on:
#      - postgres
#    networks:
#      - custom

volumes:
  db_data:
  es_data:
  filebeat_data:


networks:
  custom:
    driver: bridge